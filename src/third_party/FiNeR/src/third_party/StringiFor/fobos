[modes]
modes = tests-gnu tests-gnu-debug
        tests-intel tests-intel-debug
        stringifor-static-gnu stringifor-shared-gnu
        stringifor-static-intel stringifor-shared-intel

[common-variables]
$CSHARED_GNU = -c -fPIC -frealloc-lhs -std=f2008 -fall-intrinsics
$CSHARED_INT = -c -fPIC -assume realloc_lhs -standard-semantics -std08
$LSHARED     = -shared
$CSTATIC_GNU = -c -frealloc-lhs -std=f2008 -fall-intrinsics
$CSTATIC_INT = -c -assume realloc_lhs -standard-semantics -std08
$DEBUG_GNU   = -Og -g3 -Warray-bounds -Wcharacter-truncation -Wline-truncation -Wimplicit-interface -Wimplicit-procedure -Wunderflow -fcheck=all -fmodule-private -ffree-line-length-132 -fimplicit-none -fbacktrace -fdump-core -finit-real=nan
$DEBUG_INT   = -O0 -check arg_temp_created -check format -check assume -check format -check output_conversion -check pointers -check stack -check uninit -debug all -warn all -extend-source 132 -traceback
$OPTIMIZE    = -O2
$EXDIRS      = BeFoR64/src/tests/ BeFoR64/src/third_party/ PENF/src/tests/

# main modes
[tests-gnu]
template  = template-static-gnu
build_dir = exe

[tests-gnu-debug]
template  = template-static-gnu-debug
build_dir = exe

[tests-intel]
template  = template-static-intel
build_dir = exe

[tests-intel-debug]
template  = template-static-intel-debug
build_dir = exe

[stringifor-static-gnu]
template  = template-static-gnu
build_dir = lib
target    = stringifor.F90
output    = libstringifor.a
mklib     = static

[stringifor-shared-gnu]
template  = template-shared-gnu
build_dir = lib
target    = stringifor.F90
output    = libstringifor.so
mklib     = shared

[stringifor-static-intel]
template  = template-static-intel
build_dir = lib
target    = stringifor.F90
output    = libstringifor.a
mklib     = static

[stringifor-shared-intel]
template  = template-shared-intel
build_dir = lib
target    = stringifor.F90
output    = libstringifor.so
mklib     = shared

# templates
[template-static-gnu]
compiler        = gnu
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSTATIC_GNU $OPTIMIZE
lflags          = $OPTIMIZE
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

[template-static-gnu-debug]
compiler        = gnu
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSTATIC_GNU $DEBUG_GNU
lflags          = $DEBUG_GNU
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

[template-shared-gnu]
compiler        = gnu
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSHARED_GNU $OPTIMIZE
lflags          = $LSHARED $OPTIMIZE
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

[template-static-intel]
compiler        = intel
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSTATIC_INT $OPTIMIZE
lflags          = $OPTIMIZE
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

[template-static-intel-debug]
compiler        = intel
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSTATIC_INT $DEBUG_INT
lflags          = $DEBUG_INT
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

[template-shared-intel]
compiler        = intel
exclude_dirs    = $EXDIRS
src             = src/
cflags          = $CSHARED_INT $OPTIMIZE
lflags          = $LSHARED $OPTIMIZE
cflags_heritage = True
colors          = True
quiet           = False
log             = True
jobs            = 10

# rules
[rule-makedoc]
help   = Build documentation from source files
rule_1 = rm -rf doc/html/*
rule_2 = ford doc/main_page.md --debug
rule_3 = cp -r doc/html/publish/* doc/html/
rule_4 = rm -rf doc/html/publish

[rule-deldoc]
help = Delete documentation
rule = rm -rf doc/html/*

[rule-delexe]
help = Delete exes
rule = rm -rf exe/

[rule-clean]
help = Clean the project tree
rule_1 = FoBiS.py rule -ex deldoc
rule_2 = FoBiS.py rule -ex delexe
rule_3 = rm -f *.gcov

[rule-maketar]
help = Make tar archive of the project
rule = tar --xform="s%^%StringiFor/%" -czf StringiFor.tar.gz *

[rule-makecoverage]
help   = Perform coverage analysis
rule_1 = FoBiS.py doctests -mode tests-gnu-debug -coverage --exclude_from_doctests penf.F90 penf_b_size.F90 penf_stringify.F90 befor64_pack_data_m.F90 befor64.F90 -keep_volatile_doctests -doctests_preprocessor fpp
rule_2 = rm -f exe/obj/penf* exe/obj/befor64*
rule_3 = gcov -o exe/obj/ src/lib/stringifor*
rule_4 = rm -f *.gcov

[rule-makecoverage-analysis]
help   = Perform coverage analysis and saving reports in markdown
rule_1 = FoBiS.py doctests -mode tests-gnu-debug -coverage --exclude_from_doctests penf.F90 penf_b_size.F90 penf_stringify.F90 befor64_pack_data_m.F90 befor64.F90 -keep_volatile_doctests -doctests_preprocessor fpp
rule_2 = rm -f exe/obj/penf* exe/obj/befor64*
rule_3 = gcov -o exe/obj/ src/lib/stringifor*
rule_4 = FoBiS.py rule -gcov_analyzer wiki/ Coverage-Analysis
rule_5 = rm -f *.gcov
